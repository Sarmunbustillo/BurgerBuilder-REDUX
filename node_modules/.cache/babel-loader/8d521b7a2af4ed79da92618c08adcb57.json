{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\SARMUN\\\\Desktop\\\\projects\\\\Burger Builder\\\\BurgerBuilder-REDUX\\\\src\\\\containers\\\\Auth\\\\Auth.js\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { Redirect } from 'react-router-dom';\nimport Input from '../../Components/UI/Input/Input';\nimport Button from '../../Components/UI/Button/Button';\nimport classes from './Auth.module.css';\nimport * as actions from '../../store/actions/index';\nimport Spinner from '../../Components/UI/Spinner/Spinner';\nimport { updateObject, checkValidity } from '../../shared/utility';\n\nclass Auth extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      controls: {\n        email: {\n          elementType: 'input',\n          elementCofig: {\n            type: 'email',\n            placeholder: 'Email Address'\n          },\n          value: '',\n          validation: {\n            required: true,\n            isEmail: true\n          },\n          valid: false,\n          touched: false\n        },\n        password: {\n          elementType: 'input',\n          elementCofig: {\n            type: 'password',\n            placeholder: 'password'\n          },\n          value: '',\n          validation: {\n            required: true,\n            minLength: 6\n          },\n          valid: false,\n          touched: false\n        }\n      },\n      isSignUp: true\n    };\n\n    this.inputChangedHandler = (event, controlName) => {\n      const updatedControls = updateObject(this.state.controls, {\n        [controlName]: updateObject(this.state.controls[controlName], {\n          value: event.target.value,\n          valid: checkValidity(event.target.value, this.state.controls[controlName].validation),\n          touched: true\n        })\n      });\n      this.setState({\n        controls: updatedControls\n      });\n    };\n\n    this.submitHandler = event => {\n      event.preventDefault();\n      this.props.onAuth(this.state.controls.email.value, this.state.controls.password.value, this.state.isSignUp);\n    };\n\n    this.switchAuthModeHandler = () => {\n      this.setState(prevState => {\n        return {\n          isSignUp: !prevState.isSignUp\n        };\n      });\n    };\n  }\n\n  componentDidMount() {\n    if (!this.props.buildingBurger && this.props.authRedirectPath !== '/') {\n      this.props.onSetAuthRedirectPath();\n    }\n  }\n\n  render() {\n    //converts state object into an array that can bee looped thru\n    const formElementsArray = []; //key = email, password\n\n    for (let key in this.state.controls) {\n      formElementsArray.push({\n        id: key,\n        //this.state.controls[key] = elementType, elementConfig...\n        config: this.state.controls[key]\n      });\n    }\n\n    let form = formElementsArray.map(formElement => React.createElement(Input, {\n      key: formElement.id,\n      elementType: formElement.config.elementType,\n      elementConfig: formElement.config.elementCofig,\n      value: formElement.config.value,\n      invalid: !formElement.config.valid,\n      shouldValidate: formElement.config.validation,\n      touched: formElement.config.touched,\n      changed: event => this.inputChangedHandler(event, formElement.id),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105\n      },\n      __self: this\n    }));\n\n    if (this.props.loading) {\n      form = React.createElement(Spinner, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 119\n        },\n        __self: this\n      });\n    }\n\n    let errorMesagge = null;\n\n    if (this.props.error) {\n      errorMesagge = React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 125\n        },\n        __self: this\n      }, this.props.error.message);\n    }\n\n    let authRedirect = null;\n\n    if (this.props.isAuthenticated) {\n      authRedirect = React.createElement(Redirect, {\n        to: this.props.authRedirectPath,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 131\n        },\n        __self: this\n      });\n    }\n\n    return React.createElement(\"div\", {\n      className: classes.Auth,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135\n      },\n      __self: this\n    }, authRedirect, errorMesagge, React.createElement(\"form\", {\n      onSubmit: this.submitHandler,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138\n      },\n      __self: this\n    }, form, React.createElement(Button, {\n      btnType: \"Success\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140\n      },\n      __self: this\n    }, \"SUBMIT\")), React.createElement(Button, {\n      btnType: \"Danger\",\n      clicked: this.switchAuthModeHandler,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142\n      },\n      __self: this\n    }, \"SWITCH TO \", this.state.isSignUp ? 'SIGNIN' : 'SINGUP'));\n  }\n\n}\n\n;\n\nconst mapStateToProps = state => {\n  return {\n    loading: state.auth.loading,\n    error: state.auth.error,\n    isAuthenticated: state.auth.token !== null,\n    buildingBurger: state.burgerBuilder.building,\n    authRedirectPath: state.auth.authRedirectPath\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onAuth: (email, password, isSignUp) => dispatch(actions.auth(email, password, isSignUp)),\n    onSetAuthRedirectPath: () => dispatch(actions.setAuthRedirectPath('/'))\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Auth);","map":{"version":3,"sources":["C:/Users/SARMUN/Desktop/projects/Burger Builder/BurgerBuilder-REDUX/src/containers/Auth/Auth.js"],"names":["React","Component","connect","Redirect","Input","Button","classes","actions","Spinner","updateObject","checkValidity","Auth","state","controls","email","elementType","elementCofig","type","placeholder","value","validation","required","isEmail","valid","touched","password","minLength","isSignUp","inputChangedHandler","event","controlName","updatedControls","target","setState","submitHandler","preventDefault","props","onAuth","switchAuthModeHandler","prevState","componentDidMount","buildingBurger","authRedirectPath","onSetAuthRedirectPath","render","formElementsArray","key","push","id","config","form","map","formElement","loading","errorMesagge","error","message","authRedirect","isAuthenticated","mapStateToProps","auth","token","burgerBuilder","building","mapDispatchToProps","dispatch","setAuthRedirectPath"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport {connect} from 'react-redux';\r\nimport {Redirect} from 'react-router-dom'\r\n\r\nimport Input from '../../Components/UI/Input/Input';\r\nimport Button from '../../Components/UI/Button/Button';\r\nimport classes from './Auth.module.css';\r\nimport * as actions from '../../store/actions/index';\r\nimport Spinner from '../../Components/UI/Spinner/Spinner';\r\nimport { updateObject, checkValidity } from '../../shared/utility';\r\n\r\n\r\n\r\nclass Auth extends Component {\r\n    state ={\r\n        controls : {\r\n              email: {\r\n                elementType: 'input',\r\n                elementCofig: {\r\n                    type: 'email',\r\n                    placeholder: 'Email Address'\r\n                },\r\n                value: '',\r\n                validation: {\r\n                    required: true,\r\n                    isEmail: true\r\n                },\r\n                valid: false,\r\n                touched: false\r\n            },\r\n              password: {\r\n                elementType: 'input',\r\n                elementCofig: {\r\n                    type: 'password',\r\n                    placeholder: 'password'\r\n                },\r\n                value: '',\r\n                validation: {\r\n                    required: true,\r\n                    minLength: 6\r\n                },\r\n                valid: false,\r\n                touched: false\r\n            }\r\n        },\r\n        \r\n        isSignUp: true\r\n    };\r\n\r\n    componentDidMount () {\r\n        if (!this.props.buildingBurger && this.props.authRedirectPath !== '/') {\r\n            this.props.onSetAuthRedirectPath();\r\n        }\r\n    };\r\n    \r\n\r\n    inputChangedHandler = (event, controlName) => {\r\n        const updatedControls = updateObject(this.state.controls, {\r\n            [controlName]: updateObject(this.state.controls[controlName], {\r\n                value: event.target.value,\r\n                valid: checkValidity(event.target.value, this.state.controls[controlName].validation),\r\n                touched: true\r\n            })\r\n        });       \r\n        this.setState({controls: updatedControls})\r\n    };\r\n    // for reference in how to update an object withouth mutating it\r\n    // inputChangedHandler = (event, controlName) => {\r\n    //     const updatedControls = {\r\n    //         ...this.state.controls,\r\n    //         [controlName]: {\r\n    //             ...this.state.controls[controlName],\r\n    //             value: event.target.value,\r\n    //             valid: this.checkValidity(event.target.value, this.state.controls[controlName].validation),\r\n    //             touched: true\r\n    //         }\r\n    //     };\r\n    //     this.setState({controls: updatedControls})\r\n    // };\r\n\r\n    submitHandler = (event) => {\r\n        event.preventDefault();\r\n        this.props.onAuth(this.state.controls.email.value, this.state.controls.password.value, this.state.isSignUp);\r\n    };\r\n\r\n    switchAuthModeHandler = () => {\r\n        this.setState(prevState => {\r\n            return {isSignUp: !prevState.isSignUp}\r\n        });\r\n    }\r\n\r\n    render() {\r\n        //converts state object into an array that can bee looped thru\r\n        const formElementsArray = [];\r\n        //key = email, password\r\n        for (let key in this.state.controls) {\r\n            formElementsArray.push({\r\n                id: key,\r\n                //this.state.controls[key] = elementType, elementConfig...\r\n                config: this.state.controls[key]\r\n            });\r\n        }\r\n\r\n        let form = formElementsArray.map(formElement => (\r\n            <Input \r\n                key={formElement.id}\r\n                elementType={formElement.config.elementType}\r\n                elementConfig={formElement.config.elementCofig}\r\n                value={formElement.config.value}\r\n                invalid={!formElement.config.valid}\r\n                shouldValidate={formElement.config.validation}\r\n                touched={formElement.config.touched}\r\n                changed={(event) => this.inputChangedHandler(event, formElement.id)}\r\n            />\r\n            \r\n        ));\r\n\r\n        if(this.props.loading) {\r\n            form = <Spinner />\r\n        }\r\n\r\n        let errorMesagge = null;\r\n        if(this.props.error) {\r\n            errorMesagge = (\r\n                <p>{this.props.error.message}</p>\r\n            );\r\n        }\r\n\r\n        let authRedirect = null;\r\n        if(this.props.isAuthenticated) {\r\n            authRedirect = <Redirect to={this.props.authRedirectPath} />\r\n        }\r\n\r\n        return (\r\n            <div className={classes.Auth}>\r\n                {authRedirect}\r\n                {errorMesagge}\r\n                <form onSubmit={this.submitHandler}> \r\n                    {form}\r\n                    <Button btnType=\"Success\">SUBMIT</Button>\r\n                </form>\r\n                <Button \r\n                    btnType=\"Danger\"\r\n                    clicked={this.switchAuthModeHandler}\r\n                    >SWITCH TO {this.state.isSignUp ? 'SIGNIN' : 'SINGUP'}</Button>\r\n            </div>\r\n        )\r\n    }\r\n};\r\n\r\nconst mapStateToProps = state => {    \r\n    return {\r\n        loading: state.auth.loading,\r\n        error: state.auth.error,\r\n        isAuthenticated : state.auth.token !== null,\r\n        buildingBurger: state.burgerBuilder.building,\r\n        authRedirectPath: state.auth.authRedirectPath\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        onAuth: (email, password, isSignUp) => dispatch(actions.auth(email, password, isSignUp)),\r\n        onSetAuthRedirectPath: () => dispatch(actions.setAuthRedirectPath('/'))\r\n    }\r\n};\r\n\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)( Auth);"]},"metadata":{},"sourceType":"module"}