{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\SARMUN\\\\Desktop\\\\projects\\\\Burger Builder\\\\BurgerBuilder-REDUX\\\\src\\\\containers\\\\Checkout\\\\ContactData\\\\ContactData.js\";\nimport React, { Component } from 'react';\nimport Button from '../../../Components/UI/Button/Button';\nimport classes from './ContactData.module.css';\nimport axios from '../../../axios-orders';\nimport Spinner from '../../../Components/UI/Spinner/Spinner';\nimport Input from '../../../Components/UI/Input/Input';\nimport { connect } from 'react-redux';\nimport withErrorHandler from '../../../hoc/withErrorHandler/withErrorHandler';\nimport * as actions from '../../../store/actions/index';\nimport { updateObject, checkValidity } from '../../../shared/utility';\n\nclass ContactData extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      orderForm: {\n        name: {\n          elementType: 'input',\n          elementCofig: {\n            type: 'text',\n            placeholder: 'Your Name'\n          },\n          value: '',\n          validation: {\n            required: true\n          },\n          valid: false,\n          touched: false\n        },\n        street: {\n          elementType: 'input',\n          elementCofig: {\n            type: 'text',\n            placeholder: 'Street'\n          },\n          value: '',\n          validation: {\n            required: true\n          },\n          valid: false,\n          touched: false\n        },\n        zipCode: {\n          elementType: 'input',\n          elementCofig: {\n            type: 'number',\n            placeholder: 'ZIP Code'\n          },\n          value: '',\n          validation: {\n            required: true,\n            minLength: 5,\n            maxLength: 5\n          },\n          valid: false,\n          touched: false\n        },\n        country: {\n          elementType: 'input',\n          elementCofig: {\n            type: 'text',\n            placeholder: 'Country'\n          },\n          value: '',\n          validation: {\n            required: true\n          },\n          valid: false,\n          touched: false\n        },\n        email: {\n          elementType: 'input',\n          elementCofig: {\n            type: 'email',\n            placeholder: 'Your E-Mail'\n          },\n          value: '',\n          validation: {\n            required: true\n          },\n          valid: false,\n          touched: false\n        },\n        deliveryMethod: {\n          elementType: 'select',\n          elementCofig: {\n            options: [{\n              value: 'fastest',\n              displayValue: 'Fastest'\n            }, {\n              value: 'cheapest',\n              displayValue: 'Cheapest'\n            }]\n          },\n          value: 'fastest',\n          validation: {},\n          valid: true\n        }\n      },\n      formIsValid: false\n    };\n\n    this.orderHandler = event => {\n      // console.log(this.props.ingredients);\n      //alert('You Continued!');\n      event.preventDefault();\n      const formData = {};\n\n      for (let formElementIdentifier in this.state.orderForm) {\n        formData[formElementIdentifier] = this.state.orderForm[formElementIdentifier].value;\n      } //normally you calculate the price on the server side.. here is just for the example\n\n\n      const order = {\n        ingredients: this.props.ings,\n        price: this.props.price,\n        orderData: formData,\n        userId: this.props.userId\n      };\n      this.props.onOrderBurger(order, this.props.token);\n    };\n\n    this.inputChangedHandler = (event, inputIdentifier) => {\n      //console.log(event.target.value);\n      // this.state.orderForm[inputIdentifier] = name, street, email\n      const updatedFormElement = updateObject(this.state.orderForm[inputIdentifier], {\n        value: event.target.value,\n        valid: checkValidity(event.target.value, this.state.orderForm[inputIdentifier].validation),\n        touched: true\n      });\n      const updatedOrderForm = updateObject(this.state.orderForm, {\n        //name, street, ...\n        [inputIdentifier]: updatedFormElement\n      }); //console.log(updatedFormElement);\n      //check if all the elements are valid\n\n      let formIsValid = true;\n\n      for (let inputIdentifier in updatedOrderForm) {\n        formIsValid = updatedOrderForm[inputIdentifier].valid && formIsValid;\n      }\n\n      this.setState({\n        orderForm: updatedOrderForm,\n        formIsValid: formIsValid\n      });\n    };\n  }\n\n  render() {\n    //converts state object into an array that can bee looped thru\n    const formElementsArray = []; //key = name, street....\n\n    for (let key in this.state.orderForm) {\n      formElementsArray.push({\n        id: key,\n        //this.state.orderForm[key] = elementType, elementConfig...\n        config: this.state.orderForm[key]\n      });\n    }\n\n    let form = React.createElement(\"form\", {\n      onSubmit: this.orderHandler,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 158\n      },\n      __self: this\n    }, formElementsArray.map(fromElement => React.createElement(Input, {\n      key: fromElement.id,\n      elementType: fromElement.config.elementType,\n      elementConfig: fromElement.config.elementCofig,\n      value: fromElement.config.value,\n      invalid: !fromElement.config.valid,\n      shouldValidate: fromElement.config.validation,\n      touched: fromElement.config.touched,\n      changed: event => this.inputChangedHandler(event, fromElement.id),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 160\n      },\n      __self: this\n    })), React.createElement(Button, {\n      btnType: \"Success\",\n      disabled: !this.state.formIsValid,\n      clicked: this.orderHandler,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 171\n      },\n      __self: this\n    }, \"Order\"));\n\n    if (this.props.loading) {\n      form = React.createElement(Spinner, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 175\n        },\n        __self: this\n      });\n    }\n\n    return React.createElement(\"div\", {\n      className: classes.ContactData,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 179\n      },\n      __self: this\n    }, React.createElement(\"h4\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 180\n      },\n      __self: this\n    }, \"Enter Your Contact Data\"), form);\n  }\n\n}\n\n;\n\nconst mapStateToProps = state => {\n  return {\n    ings: state.burgerBuilder.ingredients,\n    price: state.burgerBuilder.totalPrice,\n    loading: state.order.loading,\n    token: state.auth.token,\n    userId: state.auth.userId\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onOrderBurger: (orderData, token) => dispatch(actions.purchaseBurger(orderData, token))\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(withErrorHandler(ContactData, axios));","map":{"version":3,"sources":["C:/Users/SARMUN/Desktop/projects/Burger Builder/BurgerBuilder-REDUX/src/containers/Checkout/ContactData/ContactData.js"],"names":["React","Component","Button","classes","axios","Spinner","Input","connect","withErrorHandler","actions","updateObject","checkValidity","ContactData","state","orderForm","name","elementType","elementCofig","type","placeholder","value","validation","required","valid","touched","street","zipCode","minLength","maxLength","country","email","deliveryMethod","options","displayValue","formIsValid","orderHandler","event","preventDefault","formData","formElementIdentifier","order","ingredients","props","ings","price","orderData","userId","onOrderBurger","token","inputChangedHandler","inputIdentifier","updatedFormElement","target","updatedOrderForm","setState","render","formElementsArray","key","push","id","config","form","map","fromElement","loading","mapStateToProps","burgerBuilder","totalPrice","auth","mapDispatchToProps","dispatch","purchaseBurger"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\r\nimport Button from '../../../Components/UI/Button/Button';\r\nimport classes from './ContactData.module.css';\r\nimport axios from '../../../axios-orders';\r\nimport Spinner from '../../../Components/UI/Spinner/Spinner';\r\nimport Input from '../../../Components/UI/Input/Input';\r\nimport {connect } from 'react-redux';\r\nimport withErrorHandler from '../../../hoc/withErrorHandler/withErrorHandler';\r\nimport * as actions from '../../../store/actions/index';\r\nimport { updateObject, checkValidity } from '../../../shared/utility';\r\n\r\n\r\nclass ContactData extends Component {\r\n    state = {\r\n        orderForm: {            \r\n            name: {\r\n                elementType: 'input',\r\n                elementCofig: {\r\n                    type: 'text',\r\n                    placeholder: 'Your Name'\r\n                },\r\n                value: '',\r\n                validation: {\r\n                    required: true\r\n                },\r\n                valid: false,\r\n                touched: false\r\n            },                                            \r\n            street: {\r\n                elementType: 'input',\r\n                elementCofig: {\r\n                    type: 'text',\r\n                    placeholder: 'Street'\r\n                },\r\n                value: '',\r\n                validation: {\r\n                    required: true                        \r\n                },\r\n                valid: false,\r\n                touched: false\r\n            },       \r\n            zipCode: {\r\n                elementType: 'input',\r\n                elementCofig: {\r\n                    type: 'number',\r\n                    placeholder: 'ZIP Code'\r\n                },\r\n                value: '',\r\n                validation: {\r\n                    required: true,\r\n                    minLength: 5,\r\n                    maxLength: 5\r\n                },\r\n                valid: false,\r\n                touched: false\r\n            },       \r\n            country: {\r\n                elementType: 'input',\r\n                elementCofig: {\r\n                    type: 'text',\r\n                    placeholder: 'Country'\r\n                },\r\n                value: '',\r\n                validation: {\r\n                    required: true\r\n                },\r\n                valid: false,\r\n                touched: false\r\n            },                    \r\n            email: {\r\n                elementType: 'input',\r\n                elementCofig: {\r\n                    type: 'email',\r\n                    placeholder: 'Your E-Mail'\r\n                },\r\n                value: '',\r\n                validation: {\r\n                    required: true\r\n                },\r\n                valid: false,\r\n                touched: false\r\n            },               \r\n            deliveryMethod: {\r\n                elementType: 'select',\r\n                elementCofig: {\r\n                    options: \r\n                    [\r\n                        {value: 'fastest', displayValue: 'Fastest'},\r\n                        {value: 'cheapest', displayValue: 'Cheapest'}\r\n                    ],\r\n                    \r\n                },\r\n                value: 'fastest',\r\n                validation: {},\r\n                valid: true\r\n            },       \r\n        },\r\n        formIsValid: false\r\n       \r\n    }\r\n\r\n\r\n    orderHandler = (event) => {\r\n        // console.log(this.props.ingredients);\r\n        //alert('You Continued!');\r\n        event.preventDefault();       \r\n        const formData = {};\r\n        for (let formElementIdentifier in this.state.orderForm) {\r\n            formData[formElementIdentifier] = this.state.orderForm[formElementIdentifier].value;\r\n        }\r\n        //normally you calculate the price on the server side.. here is just for the example\r\n        const order = {\r\n            ingredients: this.props.ings,\r\n            price: this.props.price,\r\n            orderData: formData,\r\n            userId: this.props.userId\r\n        }\r\n       this.props.onOrderBurger(order, this.props.token);\r\n    };\r\n    \r\n\r\n    \r\n    inputChangedHandler = (event, inputIdentifier) => {\r\n        //console.log(event.target.value);\r\n        // this.state.orderForm[inputIdentifier] = name, street, email\r\n        const updatedFormElement = updateObject(this.state.orderForm[inputIdentifier], {\r\n           value: event.target.value,\r\n           valid: checkValidity(event.target.value, this.state.orderForm[inputIdentifier].validation),\r\n           touched: true\r\n        }); \r\n        \r\n        const updatedOrderForm = updateObject(this.state.orderForm, {\r\n            //name, street, ...\r\n            [inputIdentifier]: updatedFormElement\r\n        });        \r\n        //console.log(updatedFormElement);\r\n        //check if all the elements are valid\r\n        let formIsValid = true;\r\n        for (let inputIdentifier in updatedOrderForm) {\r\n            formIsValid = updatedOrderForm[inputIdentifier].valid && formIsValid;\r\n        }\r\n\r\n        this.setState({orderForm: updatedOrderForm, formIsValid: formIsValid });\r\n    };\r\n\r\n    render() {\r\n        //converts state object into an array that can bee looped thru\r\n        const formElementsArray = [];\r\n        //key = name, street....\r\n        for (let key in this.state.orderForm) {\r\n            formElementsArray.push({\r\n                id: key,\r\n                //this.state.orderForm[key] = elementType, elementConfig...\r\n                config: this.state.orderForm[key]\r\n            });\r\n        }\r\n        let form = (\r\n            <form onSubmit={this.orderHandler}>               \r\n                {formElementsArray.map(fromElement => (\r\n                    <Input \r\n                    key={fromElement.id}\r\n                    elementType={fromElement.config.elementType}\r\n                    elementConfig={fromElement.config.elementCofig}\r\n                    value={fromElement.config.value}\r\n                    invalid={!fromElement.config.valid}\r\n                    shouldValidate={fromElement.config.validation}\r\n                    touched={fromElement.config.touched}\r\n                    changed={(event) => this.inputChangedHandler(event, fromElement.id)}\r\n                />\r\n                ))}\r\n                <Button btnType=\"Success\" disabled={!this.state.formIsValid} clicked={this.orderHandler}>Order</Button>\r\n            </form> \r\n        );\r\n        if(this.props.loading) {\r\n            form = <Spinner />;\r\n        }\r\n\r\n        return (\r\n            <div className={classes.ContactData}>\r\n                <h4>Enter Your Contact Data</h4> \r\n                {form}     \r\n            </div>\r\n        )\r\n    }\r\n};\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        ings: state.burgerBuilder.ingredients,\r\n        price: state.burgerBuilder.totalPrice,\r\n        loading: state.order.loading,\r\n        token : state.auth.token,\r\n        userId: state.auth.userId\r\n    }\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        onOrderBurger: (orderData, token) => dispatch(actions.purchaseBurger(orderData, token))        \r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(withErrorHandler(ContactData, axios));\r\n"]},"metadata":{},"sourceType":"module"}