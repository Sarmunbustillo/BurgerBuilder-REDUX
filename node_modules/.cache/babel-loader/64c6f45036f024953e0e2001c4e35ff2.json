{"ast":null,"code":"import _defineProperty from \"C:\\\\Users\\\\SARMUN\\\\Desktop\\\\projects\\\\Burger Builder\\\\BurgerBuilder-REDUX\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport * as actionTypes from './actionTypes';\nimport axios from '../../axios-orders';\nexport const purchaseBurgerSuccess = (id, oderData) => {\n  return {\n    type: actionTypes.PURCHASE_BURGER_SUCCESS,\n    orderId: id,\n    orderData: oderData\n  };\n};\nexport const purchaseBurgerfail = error => {\n  return {\n    type: actionTypes.PURCHASE_BURGER_FAIL,\n    error: error\n  };\n};\nexport const purchaseBurgerStart = () => {\n  return {\n    type: actionTypes.PURCHASE_BURGER_START\n  };\n};\nexport const purchaseBurger = (orderData, token) => {\n  return dispatch => {\n    dispatch(purchaseBurgerStart());\n    axios.post('/orders.json?auth=' + token, orderData).then(response => {\n      //console.log(response.data)\n      dispatch(purchaseBurgerSuccess(response.data.name, orderData));\n    }).catch(error => {\n      dispatch(purchaseBurgerfail(error));\n    });\n  };\n};\nexport const purchasedInit = () => {\n  return {\n    type: actionTypes.PURCHASE_INIT\n  };\n};\nexport const fetchOrdersSuccess = orders => {\n  return {\n    type: actionTypes.FETCH_ORDERS_SUCCESS,\n    orders: orders\n  };\n};\nexport const fetchOrdersFail = error => {\n  return {\n    type: actionTypes.FETCH_ORDERS_FAIL,\n    error: error\n  };\n};\nexport const fetchOrderStart = () => {\n  return {\n    type: actionTypes.FETCH_ORDERS_START\n  };\n};\nexport const fetchOrders = (token, userId) => {\n  return dispatch => {\n    dispatch(fetchOrderStart());\n    const queryParams = '?auth=' + token + '&orderBy=\"userId\"&equalTo=\"' + userId + '\"';\n    axios.get('./orders.json' + queryParams).then(res => {\n      const fetchedOrders = [];\n\n      for (let key in res.data) {\n        //to not lose the id name given by firebase push an object\n        fetchedOrders.push(_objectSpread({}, res.data[key], {\n          id: key\n        }));\n      }\n\n      dispatch(fetchOrdersSuccess(fetchedOrders));\n    }).catch(err => {\n      dispatch(fetchOrdersFail(err));\n    });\n  };\n};","map":{"version":3,"sources":["C:/Users/SARMUN/Desktop/projects/Burger Builder/BurgerBuilder-REDUX/src/store/actions/order.js"],"names":["actionTypes","axios","purchaseBurgerSuccess","id","oderData","type","PURCHASE_BURGER_SUCCESS","orderId","orderData","purchaseBurgerfail","error","PURCHASE_BURGER_FAIL","purchaseBurgerStart","PURCHASE_BURGER_START","purchaseBurger","token","dispatch","post","then","response","data","name","catch","purchasedInit","PURCHASE_INIT","fetchOrdersSuccess","orders","FETCH_ORDERS_SUCCESS","fetchOrdersFail","FETCH_ORDERS_FAIL","fetchOrderStart","FETCH_ORDERS_START","fetchOrders","userId","queryParams","get","res","fetchedOrders","key","push","err"],"mappings":";;;;;;AAAA,OAAO,KAAKA,WAAZ,MAA6B,eAA7B;AACA,OAAOC,KAAP,MAAkB,oBAAlB;AAEA,OAAO,MAAMC,qBAAqB,GAAG,CAACC,EAAD,EAAKC,QAAL,KAAkB;AACnD,SAAO;AACHC,IAAAA,IAAI,EAAEL,WAAW,CAACM,uBADf;AAEHC,IAAAA,OAAO,EAAEJ,EAFN;AAGHK,IAAAA,SAAS,EAAEJ;AAHR,GAAP;AAKH,CANM;AAQP,OAAO,MAAMK,kBAAkB,GAAIC,KAAD,IAAW;AACzC,SAAO;AACHL,IAAAA,IAAI,EAAEL,WAAW,CAACW,oBADf;AAEHD,IAAAA,KAAK,EAAEA;AAFJ,GAAP;AAIH,CALM;AAOP,OAAO,MAAME,mBAAmB,GAAG,MAAM;AACrC,SAAO;AACHP,IAAAA,IAAI,EAAEL,WAAW,CAACa;AADf,GAAP;AAGH,CAJM;AAMP,OAAO,MAAMC,cAAc,GAAG,CAACN,SAAD,EAAYO,KAAZ,KAAsB;AAChD,SAAQC,QAAQ,IAAI;AAChBA,IAAAA,QAAQ,CAACJ,mBAAmB,EAApB,CAAR;AACAX,IAAAA,KAAK,CAACgB,IAAN,CAAW,uBAAuBF,KAAlC,EAAyCP,SAAzC,EACKU,IADL,CACUC,QAAQ,IAAI;AACd;AACAH,MAAAA,QAAQ,CAACd,qBAAqB,CAACiB,QAAQ,CAACC,IAAT,CAAcC,IAAf,EAAqBb,SAArB,CAAtB,CAAR;AACH,KAJL,EAKKc,KALL,CAKWZ,KAAK,IAAI;AACbM,MAAAA,QAAQ,CAACP,kBAAkB,CAACC,KAAD,CAAnB,CAAR;AACF,KAPL;AAQH,GAVD;AAWH,CAZM;AAcP,OAAO,MAAMa,aAAa,GAAG,MAAM;AAC/B,SAAO;AACHlB,IAAAA,IAAI,EAAEL,WAAW,CAACwB;AADf,GAAP;AAGH,CAJM;AAMP,OAAO,MAAMC,kBAAkB,GAAIC,MAAD,IAAY;AAC1C,SAAM;AACFrB,IAAAA,IAAI,EAAEL,WAAW,CAAC2B,oBADhB;AAEFD,IAAAA,MAAM,EAAEA;AAFN,GAAN;AAIH,CALM;AAOP,OAAO,MAAME,eAAe,GAAIlB,KAAD,IAAW;AACtC,SAAO;AACHL,IAAAA,IAAI,EAAEL,WAAW,CAAC6B,iBADf;AAEHnB,IAAAA,KAAK,EAAEA;AAFJ,GAAP;AAIH,CALM;AAOP,OAAO,MAAMoB,eAAe,GAAG,MAAM;AACjC,SAAO;AACHzB,IAAAA,IAAI,EAAEL,WAAW,CAAC+B;AADf,GAAP;AAGH,CAJM;AAMP,OAAO,MAAMC,WAAW,GAAG,CAACjB,KAAD,EAAQkB,MAAR,KAAmB;AAC1C,SAAOjB,QAAQ,IAAI;AACfA,IAAAA,QAAQ,CAACc,eAAe,EAAhB,CAAR;AACA,UAAMI,WAAW,GAAG,WAAWnB,KAAX,GAAmB,6BAAnB,GAAmDkB,MAAnD,GAA4D,GAAhF;AACAhC,IAAAA,KAAK,CAACkC,GAAN,CAAU,kBAAkBD,WAA5B,EACKhB,IADL,CACUkB,GAAG,IAAI;AACT,YAAMC,aAAa,GAAG,EAAtB;;AACA,WAAK,IAAIC,GAAT,IAAgBF,GAAG,CAAChB,IAApB,EAA0B;AACtB;AACAiB,QAAAA,aAAa,CAACE,IAAd,mBACOH,GAAG,CAAChB,IAAJ,CAASkB,GAAT,CADP;AAEInC,UAAAA,EAAE,EAAEmC;AAFR;AAIH;;AACDtB,MAAAA,QAAQ,CAACS,kBAAkB,CAACY,aAAD,CAAnB,CAAR;AACH,KAXL,EAYKf,KAZL,CAYWkB,GAAG,IAAI;AACVxB,MAAAA,QAAQ,CAACY,eAAe,CAACY,GAAD,CAAhB,CAAR;AACH,KAdL;AAeH,GAlBD;AAmBH,CApBM","sourcesContent":["import * as actionTypes from './actionTypes';\r\nimport axios from '../../axios-orders';\r\n\r\nexport const purchaseBurgerSuccess = (id, oderData) => {\r\n    return {\r\n        type: actionTypes.PURCHASE_BURGER_SUCCESS,\r\n        orderId: id,\r\n        orderData: oderData\r\n    };\r\n};\r\n\r\nexport const purchaseBurgerfail = (error) => {\r\n    return {\r\n        type: actionTypes.PURCHASE_BURGER_FAIL,\r\n        error: error\r\n    };\r\n};\r\n\r\nexport const purchaseBurgerStart = () => {\r\n    return {\r\n        type: actionTypes.PURCHASE_BURGER_START\r\n    };\r\n};\r\n\r\nexport const purchaseBurger = (orderData, token) => {\r\n    return  dispatch => {\r\n        dispatch(purchaseBurgerStart());\r\n        axios.post('/orders.json?auth=' + token, orderData)\r\n            .then(response => {                \r\n                //console.log(response.data)\r\n                dispatch(purchaseBurgerSuccess(response.data.name, orderData))\r\n            })\r\n            .catch(error => {\r\n               dispatch(purchaseBurgerfail(error))\r\n            });\r\n    };\r\n};\r\n\r\nexport const purchasedInit = () => {\r\n    return {\r\n        type: actionTypes.PURCHASE_INIT\r\n    };\r\n};\r\n\r\nexport const fetchOrdersSuccess = (orders) => {\r\n    return{\r\n        type: actionTypes.FETCH_ORDERS_SUCCESS,\r\n        orders: orders\r\n    };\r\n};\r\n\r\nexport const fetchOrdersFail = (error) => {\r\n    return {\r\n        type: actionTypes.FETCH_ORDERS_FAIL,\r\n        error: error\r\n    };\r\n};\r\n\r\nexport const fetchOrderStart = () => {\r\n    return {\r\n        type: actionTypes.FETCH_ORDERS_START\r\n    };\r\n};\r\n\r\nexport const fetchOrders = (token, userId) => {\r\n    return dispatch => {\r\n        dispatch(fetchOrderStart());\r\n        const queryParams = '?auth=' + token + '&orderBy=\"userId\"&equalTo=\"' + userId + '\"';\r\n        axios.get('./orders.json' + queryParams)\r\n            .then(res => {\r\n                const fetchedOrders = [];\r\n                for (let key in res.data) {\r\n                    //to not lose the id name given by firebase push an object\r\n                    fetchedOrders.push({\r\n                        ...res.data[key],\r\n                        id: key\r\n                    });\r\n                }\r\n                dispatch(fetchOrdersSuccess(fetchedOrders));\r\n            })\r\n            .catch(err => {\r\n                dispatch(fetchOrdersFail(err));\r\n            });\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}