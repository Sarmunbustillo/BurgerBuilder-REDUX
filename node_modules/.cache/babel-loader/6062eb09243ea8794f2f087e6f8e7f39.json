{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\SARMUN\\\\Desktop\\\\projects\\\\Burger Builder\\\\BurgerBuilder-REDUX\\\\src\\\\Components\\\\Burger\\\\Burger.js\";\nimport React from 'react';\nimport classes from './Burger.module.css';\nimport BurgerIngredient from './BurgerIngredients/BurgerIngredients';\n\nconst burger = props => {\n  //convert the incoming object of key value pairs into an array taking into accaount the keys.\n  //returns an array of arrays\n  let transformedIngredients = Object.keys(props.ingredients).map(igKey => {\n    return [...Array(props.ingredients[igKey])].map((_, i) => {\n      return React.createElement(BurgerIngredient, {\n        key: igKey + i,\n        type: igKey,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 12\n        },\n        __self: this\n      });\n    });\n  }) //flatten the array to have only one array of objects. instead of an array of arrays that each one holds objeacts.. in order to later check if theres no ingredients selected\n  .reduce((arr, el) => {\n    return arr.concat(el);\n  }, []);\n\n  if (transformedIngredients.length === 0) {\n    transformedIngredients = React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 20\n      },\n      __self: this\n    }, \"Please add ingredients!\");\n  } //console.log(transformedIngredients);\n\n\n  return React.createElement(\"div\", {\n    className: classes.Burger,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25\n    },\n    __self: this\n  }, React.createElement(BurgerIngredient, {\n    type: \"bread-top\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26\n    },\n    __self: this\n  }), transformedIngredients, React.createElement(BurgerIngredient, {\n    type: \"bread-bottom\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28\n    },\n    __self: this\n  }));\n};\n\nexport default burger;","map":{"version":3,"sources":["C:/Users/SARMUN/Desktop/projects/Burger Builder/BurgerBuilder-REDUX/src/Components/Burger/Burger.js"],"names":["React","classes","BurgerIngredient","burger","props","transformedIngredients","Object","keys","ingredients","map","igKey","Array","_","i","reduce","arr","el","concat","length","Burger"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,OAAOC,OAAP,MAAoB,qBAApB;AACA,OAAOC,gBAAP,MAA6B,uCAA7B;;AAEA,MAAMC,MAAM,GAAIC,KAAD,IAAW;AACtB;AACA;AACA,MAAIC,sBAAsB,GAAGC,MAAM,CAACC,IAAP,CAAYH,KAAK,CAACI,WAAlB,EACxBC,GADwB,CACpBC,KAAK,IAAI;AACV,WAAO,CAAC,GAAGC,KAAK,CAACP,KAAK,CAACI,WAAN,CAAkBE,KAAlB,CAAD,CAAT,EAAqCD,GAArC,CAAyC,CAACG,CAAD,EAAIC,CAAJ,KAAU;AAC1D,aAAO,oBAAC,gBAAD;AAAkB,QAAA,GAAG,EAAEH,KAAK,GAAGG,CAA/B;AAAkC,QAAA,IAAI,EAAEH,KAAxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAP;AACC,KAFM,CAAP;AAGH,GALwB,EAM7B;AAN6B,GAOxBI,MAPwB,CAOjB,CAACC,GAAD,EAAMC,EAAN,KAAa;AACjB,WAAOD,GAAG,CAACE,MAAJ,CAAWD,EAAX,CAAP;AACH,GATwB,EAStB,EATsB,CAA7B;;AAUI,MAAGX,sBAAsB,CAACa,MAAvB,KAAkC,CAArC,EAAwC;AACpCb,IAAAA,sBAAsB,GAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iCAAzB;AACH,GAfiB,CAgBtB;;;AAEA,SACI;AAAK,IAAA,SAAS,EAAEJ,OAAO,CAACkB,MAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,oBAAC,gBAAD;AAAkB,IAAA,IAAI,EAAC,WAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,EAEKd,sBAFL,EAGI,oBAAC,gBAAD;AAAkB,IAAA,IAAI,EAAC,cAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAHJ,CADJ;AAOH,CAzBD;;AA2BA,eAAeF,MAAf","sourcesContent":["import React from 'react';\r\n\r\nimport classes from './Burger.module.css';\r\nimport BurgerIngredient from './BurgerIngredients/BurgerIngredients';\r\n\r\nconst burger = (props) => {\r\n    //convert the incoming object of key value pairs into an array taking into accaount the keys.\r\n    //returns an array of arrays\r\n    let transformedIngredients = Object.keys(props.ingredients)\r\n        .map(igKey => {            \r\n            return [...Array(props.ingredients[igKey])].map((_, i) => {                \r\n            return <BurgerIngredient key={igKey + i} type={igKey} />;           \r\n            });\r\n        }) \r\n    //flatten the array to have only one array of objects. instead of an array of arrays that each one holds objeacts.. in order to later check if theres no ingredients selected\r\n        .reduce((arr, el) => {                 \r\n            return arr.concat(el);\r\n        }, []);\r\n        if(transformedIngredients.length === 0) {\r\n            transformedIngredients = <p>Please add ingredients!</p>;\r\n        }\r\n    //console.log(transformedIngredients);\r\n\r\n    return (\r\n        <div className={classes.Burger}>\r\n            <BurgerIngredient type=\"bread-top\" />\r\n            {transformedIngredients}            \r\n            <BurgerIngredient type=\"bread-bottom\" />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default burger;"]},"metadata":{},"sourceType":"module"}