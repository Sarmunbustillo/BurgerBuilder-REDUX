{"version":3,"sources":["containers/Auth/Auth.module.css","containers/Auth/Auth.js","Components/UI/Input/Input.js","Components/UI/Input/Input.module.css"],"names":["module","exports","Auth","state","controls","email","elementType","elementCofig","type","placeholder","value","validation","required","isEmail","valid","touched","password","minLength","isSignUp","inputChangedHandler","event","controlName","updatedControls","updateObject","target","checkValidity","setState","submitHandler","preventDefault","props","onAuth","switchAuthModeHandler","prevState","this","buildingBurger","authRedirectPath","onSetAuthRedirectPath","formElementsArray","key","push","id","config","form","map","formElement","elementConfig","invalid","shouldValidate","changed","loading","errorMesagge","error","message","authRedirect","isAuthenticated","to","className","classes","onSubmit","btnType","clicked","Component","connect","auth","token","burgerBuilder","building","dispatch","actions","Input","inputElement","inputClasses","Invalid","join","onChange","options","option","displayValue","label"],"mappings":"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","file":"static/js/4.49f1f5ae.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Auth\":\"Auth_Auth__3VjcD\"};","import React, { Component } from 'react';\r\nimport {connect} from 'react-redux';\r\nimport {Redirect} from 'react-router-dom'\r\n\r\nimport Input from '../../Components/UI/Input/Input';\r\nimport Button from '../../Components/UI/Button/Button';\r\nimport classes from './Auth.module.css';\r\nimport * as actions from '../../store/actions/index';\r\nimport Spinner from '../../Components/UI/Spinner/Spinner';\r\nimport { updateObject, checkValidity } from '../../shared/utility';\r\n\r\n\r\n\r\nclass Auth extends Component {\r\n    state ={\r\n        controls : {\r\n              email: {\r\n                elementType: 'input',\r\n                elementCofig: {\r\n                    type: 'email',\r\n                    placeholder: 'Email Address'\r\n                },\r\n                value: '',\r\n                validation: {\r\n                    required: true,\r\n                    isEmail: true\r\n                },\r\n                valid: false,\r\n                touched: false\r\n            },\r\n              password: {\r\n                elementType: 'input',\r\n                elementCofig: {\r\n                    type: 'password',\r\n                    placeholder: 'password'\r\n                },\r\n                value: '',\r\n                validation: {\r\n                    required: true,\r\n                    minLength: 6\r\n                },\r\n                valid: false,\r\n                touched: false\r\n            }\r\n        },\r\n        \r\n        isSignUp: true\r\n    };\r\n\r\n    componentDidMount () {\r\n        if (!this.props.buildingBurger && this.props.authRedirectPath !== '/') {\r\n            this.props.onSetAuthRedirectPath();\r\n        }\r\n    };\r\n    \r\n\r\n    inputChangedHandler = (event, controlName) => {\r\n        const updatedControls = updateObject(this.state.controls, {\r\n            [controlName]: updateObject(this.state.controls[controlName], {\r\n                value: event.target.value,\r\n                valid: checkValidity(event.target.value, this.state.controls[controlName].validation),\r\n                touched: true\r\n            })\r\n        });       \r\n        this.setState({controls: updatedControls})\r\n    };\r\n    // for reference in how to update an object withouth mutating it\r\n    // inputChangedHandler = (event, controlName) => {\r\n    //     const updatedControls = {\r\n    //         ...this.state.controls,\r\n    //         [controlName]: {\r\n    //             ...this.state.controls[controlName],\r\n    //             value: event.target.value,\r\n    //             valid: this.checkValidity(event.target.value, this.state.controls[controlName].validation),\r\n    //             touched: true\r\n    //         }\r\n    //     };\r\n    //     this.setState({controls: updatedControls})\r\n    // };\r\n\r\n    submitHandler = (event) => {\r\n        event.preventDefault();\r\n        this.props.onAuth(this.state.controls.email.value, this.state.controls.password.value, this.state.isSignUp);\r\n    };\r\n\r\n    switchAuthModeHandler = () => {\r\n        this.setState(prevState => {\r\n            return {isSignUp: !prevState.isSignUp}\r\n        });\r\n    }\r\n\r\n    render() {\r\n        //converts state object into an array that can bee looped thru\r\n        const formElementsArray = [];\r\n        //key = email, password\r\n        for (let key in this.state.controls) {\r\n            formElementsArray.push({\r\n                id: key,\r\n                //this.state.controls[key] = elementType, elementConfig...\r\n                config: this.state.controls[key]\r\n            });\r\n        }\r\n\r\n        let form = formElementsArray.map(formElement => (\r\n            <Input \r\n                key={formElement.id}\r\n                elementType={formElement.config.elementType}\r\n                elementConfig={formElement.config.elementCofig}\r\n                value={formElement.config.value}\r\n                invalid={!formElement.config.valid}\r\n                shouldValidate={formElement.config.validation}\r\n                touched={formElement.config.touched}\r\n                changed={(event) => this.inputChangedHandler(event, formElement.id)}\r\n            />\r\n            \r\n        ));\r\n\r\n        if(this.props.loading) {\r\n            form = <Spinner />\r\n        }\r\n\r\n        let errorMesagge = null;\r\n        if(this.props.error) {\r\n            errorMesagge = (\r\n                <p>{this.props.error.message}</p>\r\n            );\r\n        }\r\n\r\n        let authRedirect = null;\r\n        if(this.props.isAuthenticated) {\r\n            authRedirect = <Redirect to={this.props.authRedirectPath} />\r\n        }\r\n\r\n        return (\r\n            <div className={classes.Auth}>\r\n                {authRedirect}\r\n                {errorMesagge}\r\n                <form onSubmit={this.submitHandler}> \r\n                    {form}\r\n                    <Button btnType=\"Success\">SUBMIT</Button>\r\n                </form>\r\n                <Button \r\n                    btnType=\"Danger\"\r\n                    clicked={this.switchAuthModeHandler}\r\n                    >SWITCH TO {this.state.isSignUp ? 'SIGNIN' : 'SINGUP'}</Button>\r\n            </div>\r\n        )\r\n    }\r\n};\r\n\r\nconst mapStateToProps = state => {    \r\n    return {\r\n        loading: state.auth.loading,\r\n        error: state.auth.error,\r\n        isAuthenticated : state.auth.token !== null,\r\n        buildingBurger: state.burgerBuilder.building,\r\n        authRedirectPath: state.auth.authRedirectPath\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        onAuth: (email, password, isSignUp) => dispatch(actions.auth(email, password, isSignUp)),\r\n        onSetAuthRedirectPath: () => dispatch(actions.setAuthRedirectPath('/'))\r\n    }\r\n};\r\n\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)( Auth);","import React from 'react';\r\nimport classes from './Input.module.css';\r\n\r\nconst Input = (props) => {\r\n    let inputElement = null;\r\n    const inputClasses = [classes.Input];\r\n\r\n    if (props.invalid && props.shouldValidate && props.touched) {\r\n        inputClasses.push(classes.Invalid);\r\n    }\r\n\r\n    switch (props.elementType) {\r\n        case ('input'):\r\n            inputElement = <input \r\n                className={inputClasses.join(' ')}\r\n                {...props.elementConfig} \r\n                value={props.value} \r\n                onChange={props.changed}/>;\r\n            break;\r\n        case ('textarea'):\r\n            inputElement = <textarea \r\n                className={inputClasses.join(' ')}\r\n                {...props.elementConfig} \r\n                value={props.value} \r\n                onChange={props.changed}/>;\r\n            break;\r\n        case ('select'):\r\n            inputElement = (\r\n            <select \r\n                    className={inputClasses.join(' ')}               \r\n                value={props.value}\r\n                onChange={props.changed}>\r\n                {props.elementConfig.options.map(option => (\r\n                    <option key={option.value} value={option.value}>{option.displayValue}</option>\r\n                ))}\r\n            </select>\r\n            );\r\n            break;\r\n        default: \r\n            inputElement = <input \r\n                className={inputClasses.join(' ')}\r\n                {...props.elementConfig} \r\n                value={props.value} \r\n                onChange={props.changed}/>;\r\n    };\r\n\r\n    return (\r\n        <div className={classes.Input}>\r\n            <label className={classes.label}>{props.label}</label>  \r\n            {inputElement}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Input\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Input\":\"Input_Input__2Boxr\",\"Label\":\"Input_Label__21igQ\",\"Invalid\":\"Input_Invalid__mUVp4\"};"],"sourceRoot":""}