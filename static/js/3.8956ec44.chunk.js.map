{"version":3,"sources":["containers/Checkout/ContactData/ContactData.module.css","Components/Order/CheckoutSummary/CheckoutSummary.js","containers/Checkout/ContactData/ContactData.js","containers/Checkout/Checkout.js","Components/UI/Input/Input.js","Components/UI/Input/Input.module.css","Components/Order/CheckoutSummary/CheckoutSummary.module.css"],"names":["module","exports","CheckoutSummary","props","className","classes","style","width","margin","Burger","ingredients","Button","btnType","clicked","onCheckoutCancelled","onCheckoutContinued","ContactData","state","orderForm","name","elementType","elementCofig","type","placeholder","value","validation","required","valid","touched","street","zipCode","minLength","maxLength","country","email","deliveryMethod","options","displayValue","formIsValid","orderHandler","event","preventDefault","formData","formElementIdentifier","order","ings","price","orderData","userId","onOrderBurger","token","inputChangedHandler","inputIdentifier","updatedFormElement","updateObject","target","checkValidity","updatedOrderForm","setState","formElementsArray","key","this","push","id","config","form","onSubmit","map","fromElement","Input","elementConfig","invalid","shouldValidate","changed","disabled","loading","Spinner","Component","connect","burgerBuilder","totalPrice","auth","dispatch","actions","withErrorHandler","axios","Checkout","history","goBack","replace","summary","to","purchasedRedirect","purchased","path","match","component","inputElement","inputClasses","Invalid","join","onChange","option","label"],"mappings":"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","file":"static/js/3.8956ec44.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"ContactData\":\"ContactData_ContactData__26cQJ\"};","import React from 'react';\r\nimport Burger from '../../Burger/Burger';\r\nimport Button from '../../UI/Button/Button';\r\nimport classes from './CheckoutSummary.module.css';\r\n\r\nconst CheckoutSummary = (props) => {\r\n    return (\r\n        <div className={classes.CheckoutSummary}>\r\n            <h1>We Hope You love it!</h1>\r\n            <div style={{width:'100%', margin:'auto'}}>\r\n                <Burger ingredients={props.ingredients}/>\r\n            </div>\r\n            <Button \r\n                btnType=\"Danger\"\r\n                clicked={props.onCheckoutCancelled}   \r\n                >CANCEL</Button>\r\n            <Button \r\n                btnType=\"Success\" \r\n                clicked={props.onCheckoutContinued}\r\n                >CONTINUE</Button>\r\n            \r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CheckoutSummary;\r\n","import React, { Component } from 'react'\r\nimport Button from '../../../Components/UI/Button/Button';\r\nimport classes from './ContactData.module.css';\r\nimport axios from '../../../axios-orders';\r\nimport Spinner from '../../../Components/UI/Spinner/Spinner';\r\nimport Input from '../../../Components/UI/Input/Input';\r\nimport {connect } from 'react-redux';\r\nimport withErrorHandler from '../../../hoc/withErrorHandler/withErrorHandler';\r\nimport * as actions from '../../../store/actions/index';\r\nimport { updateObject, checkValidity } from '../../../shared/utility';\r\n\r\n\r\nclass ContactData extends Component {\r\n    state = {\r\n        orderForm: {            \r\n            name: {\r\n                elementType: 'input',\r\n                elementCofig: {\r\n                    type: 'text',\r\n                    placeholder: 'Your Name'\r\n                },\r\n                value: '',\r\n                validation: {\r\n                    required: true\r\n                },\r\n                valid: false,\r\n                touched: false\r\n            },                                            \r\n            street: {\r\n                elementType: 'input',\r\n                elementCofig: {\r\n                    type: 'text',\r\n                    placeholder: 'Street'\r\n                },\r\n                value: '',\r\n                validation: {\r\n                    required: true                        \r\n                },\r\n                valid: false,\r\n                touched: false\r\n            },       \r\n            zipCode: {\r\n                elementType: 'input',\r\n                elementCofig: {\r\n                    type: 'number',\r\n                    placeholder: 'ZIP Code'\r\n                },\r\n                value: '',\r\n                validation: {\r\n                    required: true,\r\n                    minLength: 5,\r\n                    maxLength: 5\r\n                },\r\n                valid: false,\r\n                touched: false\r\n            },       \r\n            country: {\r\n                elementType: 'input',\r\n                elementCofig: {\r\n                    type: 'text',\r\n                    placeholder: 'Country'\r\n                },\r\n                value: '',\r\n                validation: {\r\n                    required: true\r\n                },\r\n                valid: false,\r\n                touched: false\r\n            },                    \r\n            email: {\r\n                elementType: 'input',\r\n                elementCofig: {\r\n                    type: 'email',\r\n                    placeholder: 'Your E-Mail'\r\n                },\r\n                value: '',\r\n                validation: {\r\n                    required: true\r\n                },\r\n                valid: false,\r\n                touched: false\r\n            },               \r\n            deliveryMethod: {\r\n                elementType: 'select',\r\n                elementCofig: {\r\n                    options: \r\n                    [\r\n                        {value: 'fastest', displayValue: 'Fastest'},\r\n                        {value: 'cheapest', displayValue: 'Cheapest'}\r\n                    ],\r\n                    \r\n                },\r\n                value: 'fastest',\r\n                validation: {},\r\n                valid: true\r\n            },       \r\n        },\r\n        formIsValid: false\r\n       \r\n    }\r\n\r\n\r\n    orderHandler = (event) => {\r\n        // console.log(this.props.ingredients);\r\n        //alert('You Continued!');\r\n        event.preventDefault();       \r\n        const formData = {};\r\n        for (let formElementIdentifier in this.state.orderForm) {\r\n            formData[formElementIdentifier] = this.state.orderForm[formElementIdentifier].value;\r\n        }\r\n        //normally you calculate the price on the server side.. here is just for the example\r\n        const order = {\r\n            ingredients: this.props.ings,\r\n            price: this.props.price,\r\n            orderData: formData,\r\n            userId: this.props.userId\r\n        }\r\n       this.props.onOrderBurger(order, this.props.token);\r\n    };\r\n    \r\n\r\n    \r\n    inputChangedHandler = (event, inputIdentifier) => {\r\n        //console.log(event.target.value);\r\n        // this.state.orderForm[inputIdentifier] = name, street, email\r\n        const updatedFormElement = updateObject(this.state.orderForm[inputIdentifier], {\r\n           value: event.target.value,\r\n           valid: checkValidity(event.target.value, this.state.orderForm[inputIdentifier].validation),\r\n           touched: true\r\n        }); \r\n        \r\n        const updatedOrderForm = updateObject(this.state.orderForm, {\r\n            //name, street, ...\r\n            [inputIdentifier]: updatedFormElement\r\n        });        \r\n        //console.log(updatedFormElement);\r\n        //check if all the elements are valid\r\n        let formIsValid = true;\r\n        for (let inputIdentifier in updatedOrderForm) {\r\n            formIsValid = updatedOrderForm[inputIdentifier].valid && formIsValid;\r\n        }\r\n\r\n        this.setState({orderForm: updatedOrderForm, formIsValid: formIsValid });\r\n    };\r\n\r\n    render() {\r\n        //converts state object into an array that can bee looped thru\r\n        const formElementsArray = [];\r\n        //key = name, street....\r\n        for (let key in this.state.orderForm) {\r\n            formElementsArray.push({\r\n                id: key,\r\n                //this.state.orderForm[key] = elementType, elementConfig...\r\n                config: this.state.orderForm[key]\r\n            });\r\n        }\r\n        let form = (\r\n            <form onSubmit={this.orderHandler}>               \r\n                {formElementsArray.map(fromElement => (\r\n                    <Input \r\n                    key={fromElement.id}\r\n                    elementType={fromElement.config.elementType}\r\n                    elementConfig={fromElement.config.elementCofig}\r\n                    value={fromElement.config.value}\r\n                    invalid={!fromElement.config.valid}\r\n                    shouldValidate={fromElement.config.validation}\r\n                    touched={fromElement.config.touched}\r\n                    changed={(event) => this.inputChangedHandler(event, fromElement.id)}\r\n                />\r\n                ))}\r\n                <Button btnType=\"Success\" disabled={!this.state.formIsValid} clicked={this.orderHandler}>Order</Button>\r\n            </form> \r\n        );\r\n        if(this.props.loading) {\r\n            form = <Spinner />;\r\n        }\r\n\r\n        return (\r\n            <div className={classes.ContactData}>\r\n                <h4>Enter Your Contact Data</h4> \r\n                {form}     \r\n            </div>\r\n        )\r\n    }\r\n};\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        ings: state.burgerBuilder.ingredients,\r\n        price: state.burgerBuilder.totalPrice,\r\n        loading: state.order.loading,\r\n        token : state.auth.token,\r\n        userId: state.auth.userId\r\n    }\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        onOrderBurger: (orderData, token) => dispatch(actions.purchaseBurger(orderData, token))        \r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(withErrorHandler(ContactData, axios));\r\n","import React, { Component } from 'react';\r\nimport CheckoutSummary from '../../Components/Order/CheckoutSummary/CheckoutSummary';\r\nimport {Route, Redirect} from 'react-router-dom';\r\nimport ContactData from './ContactData/ContactData';\r\nimport {connect} from 'react-redux';\r\n\r\n\r\nclass Checkout extends Component {    \r\n\r\n    onCheckoutCancelled = () => {\r\n        this.props.history.goBack();\r\n    };\r\n\r\n    onCheckoutContinued = () => {\r\n        this.props.history.replace('./checkout/contact-data');\r\n    };\r\n\r\n    render() {\r\n        let summary = <Redirect to=\"/\" />\r\n        if(this.props.ings) {\r\n            const purchasedRedirect = this.props.purchased ? <Redirect to=\"/\" /> : null;\r\n            summary =(\r\n                <div>\r\n                    {purchasedRedirect}\r\n                    <CheckoutSummary \r\n                        ingredients={this.props.ings} \r\n                        onCheckoutCancelled={this.onCheckoutCancelled}\r\n                        onCheckoutContinued={this.onCheckoutContinued}\r\n                        /> \r\n                    <Route\r\n                        path={this.props.match.path + '/contact-data'}\r\n                        component={ContactData}\r\n                        />\r\n                </div>\r\n            )\r\n        };\r\n\r\n        return summary          \r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        ings: state.burgerBuilder.ingredients,\r\n        purchased: state.order.purchased\r\n        \r\n    }\r\n};\r\n \r\nexport default connect(mapStateToProps)(Checkout);\r\n","import React from 'react';\r\nimport classes from './Input.module.css';\r\n\r\nconst Input = (props) => {\r\n    let inputElement = null;\r\n    const inputClasses = [classes.Input];\r\n\r\n    if (props.invalid && props.shouldValidate && props.touched) {\r\n        inputClasses.push(classes.Invalid);\r\n    }\r\n\r\n    switch (props.elementType) {\r\n        case ('input'):\r\n            inputElement = <input \r\n                className={inputClasses.join(' ')}\r\n                {...props.elementConfig} \r\n                value={props.value} \r\n                onChange={props.changed}/>;\r\n            break;\r\n        case ('textarea'):\r\n            inputElement = <textarea \r\n                className={inputClasses.join(' ')}\r\n                {...props.elementConfig} \r\n                value={props.value} \r\n                onChange={props.changed}/>;\r\n            break;\r\n        case ('select'):\r\n            inputElement = (\r\n            <select \r\n                    className={inputClasses.join(' ')}               \r\n                value={props.value}\r\n                onChange={props.changed}>\r\n                {props.elementConfig.options.map(option => (\r\n                    <option key={option.value} value={option.value}>{option.displayValue}</option>\r\n                ))}\r\n            </select>\r\n            );\r\n            break;\r\n        default: \r\n            inputElement = <input \r\n                className={inputClasses.join(' ')}\r\n                {...props.elementConfig} \r\n                value={props.value} \r\n                onChange={props.changed}/>;\r\n    };\r\n\r\n    return (\r\n        <div className={classes.Input}>\r\n            <label className={classes.label}>{props.label}</label>  \r\n            {inputElement}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Input\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Input\":\"Input_Input__2Boxr\",\"Label\":\"Input_Label__21igQ\",\"Invalid\":\"Input_Invalid__mUVp4\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"CheckoutSummary\":\"CheckoutSummary_CheckoutSummary__4FLDR\"};"],"sourceRoot":""}