{"version":3,"sources":["Components/Order/Order.module.css","Components/Order/Order.js","containers/Orders/Orders.js"],"names":["module","exports","Order","props","ingredients","ingredientName","push","name","amount","ingredientOutpput","map","ig","style","textTransform","display","margin","border","padding","key","className","classes","Number","parseFloat","price","toFixed","Orders","this","onFetchOrders","token","userId","orders","Spinner","loading","order","id","Component","connect","state","auth","dispatch","actions","withErrorHandler","axios"],"mappings":"2GACAA,EAAOC,QAAU,CAAC,MAAQ,uB,yHCmCXC,EAjCD,SAACC,GACX,IAAMC,EAAc,GAEpB,IAAK,IAAIC,KAAkBF,EAAMC,YAC7BA,EAAYE,KACR,CACIC,KAAMF,EACNG,OAAQL,EAAMC,YAAYC,KAKtC,IAAMI,EAAoBL,EAAYM,KAAI,SAAAC,GACtC,OAAO,0BACHC,MAAO,CACHC,cAAe,aACfC,QAAS,eACTC,OAAQ,QACRC,OAAQ,iBACRC,QAAS,OAEbC,IAAKP,EAAGJ,MACPI,EAAGJ,KATD,KASSI,EAAGH,OATZ,QAYX,OACI,yBAAKW,UAAWC,IAAQlB,OACpB,2CAAiBO,EAAjB,KACA,qCAAU,qCAAWY,OAAOC,WAAWnB,EAAMoB,OAAOC,QAAQ,O,gCCpBlEC,E,4LAIAC,KAAKvB,MAAMwB,cAAcD,KAAKvB,MAAMyB,MAAOF,KAAKvB,MAAM0B,U,+BAIpD,IAAIC,EAAS,kBAACC,EAAA,EAAD,MAWZ,OAVGL,KAAKvB,MAAM6B,UACXF,EAAUJ,KAAKvB,MAAM2B,OAAOpB,KAAI,SAAAuB,GAAK,OACzB,kBAAC,EAAD,CACIf,IAAKe,EAAMC,GACX9B,YAAa6B,EAAM7B,YACnBmB,MAAOU,EAAMV,YAM7B,6BACEO,O,GArBOK,aA0CNC,uBAfS,SAAAC,GACpB,MAAO,CACHP,OAAQO,EAAMJ,MAAMH,OACpBE,QAASK,EAAMJ,MAAMD,QACrBJ,MAAOS,EAAMC,KAAKV,MAClBC,OAAQQ,EAAMC,KAAKT,WAIA,SAAAU,GACvB,MAAO,CACHZ,cAAe,SAACC,EAAOC,GAAR,OAAmBU,EAASC,IAAoBZ,EAAOC,QAI/DO,CAA6CK,YAAiBhB,EAAQiB","file":"static/js/5.7511fd1d.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Order\":\"Order_Order__2hu5E\"};","import React from 'react';\r\nimport classes from './Order.module.css';\r\n\r\nconst Order = (props) => {\r\n    const ingredients = [];\r\n\r\n    for (let ingredientName in props.ingredients) {\r\n        ingredients.push(\r\n            {\r\n                name: ingredientName,\r\n                amount :props.ingredients[ingredientName]\r\n            }\r\n        )\r\n    };\r\n\r\n    const ingredientOutpput = ingredients.map(ig => {\r\n        return <span \r\n            style={{\r\n                textTransform: \"capitalize\",\r\n                display: 'inline-block',\r\n                margin: '0 8px',\r\n                border: '1px solid #ccc',\r\n                padding: '5px'\r\n            }}\r\n            key={ig.name}> \r\n            {ig.name} ({ig.amount})</span>\r\n    });\r\n\r\n    return (\r\n        <div className={classes.Order}>\r\n            <p>ingredients: {ingredientOutpput} </p>\r\n            <p>Price: <strong>$ {Number.parseFloat(props.price).toFixed(2)}</strong></p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Order\r\n","import React, { Component } from 'react';\r\nimport {connect} from 'react-redux';\r\nimport Order from '../../Components/Order/Order';\r\nimport axios from '../../axios-orders';\r\nimport withErrorHandler from '../../hoc/withErrorHandler/withErrorHandler';\r\nimport * as actions from '../../store/actions/index';\r\nimport Spinner from '../../Components/UI/Spinner/Spinner';\r\n\r\n\r\n\r\n\r\nclass Orders extends Component {\r\n\r\n    \r\n    componentDidMount() {\r\n      this.props.onFetchOrders(this.props.token, this.props.userId);\r\n    }\r\n\r\n    render() {\r\n        let orders = <Spinner />;\r\n        if(!this.props.loading){\r\n            orders =  this.props.orders.map(order => (\r\n                        <Order \r\n                            key={order.id}\r\n                            ingredients={order.ingredients}\r\n                            price={order.price}\r\n                        />\r\n            ) )            \r\n        };\r\n        \r\n         return (\r\n            <div>\r\n             {orders}\r\n            </div>\r\n        );\r\n    }\r\n};\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        orders: state.order.orders,\r\n        loading: state.order.loading,\r\n        token: state.auth.token,\r\n        userId: state.auth.userId\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        onFetchOrders: (token, userId) => dispatch(actions.fetchOrders(token, userId))\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(withErrorHandler(Orders, axios));\r\n"],"sourceRoot":""}